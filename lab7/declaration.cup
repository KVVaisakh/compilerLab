import java_cup.runtime.*;
import java.util.*;

	init with {: :};
	scan with {: return getScanner().next_token(); :};
	terminal SEMI,PLUS,MINUS,TIMES,DIVIDE,MOD,NL,EOFILE,TYPE,ID,COMMA;
	terminal UMINUS,LPAREN,RPAREN;
	terminal Integer NUMBER;

	non terminal            st, expr_list, expr_part,prog,id,declaration;
	non terminal Integer    expr;

	precedence left PLUS, MINUS;
	precedence left TIMES, DIVIDE, MOD;
	precedence left UMINUS;

	st::=prog EOFILE{: System.out.println("Valid Declaration"); System.exit(0); :};
	prog::=expr_list|declaration;
	declaration::=	TYPE id SEMI	{: System.exit(0); :}|
					TYPE id SEMI NL declaration|
					TYPE id SEMI NL expr_list;
	expr_list ::= 	expr_list expr_part | expr_part;
	expr_part ::= 	expr:e SEMI NL expr_part{: System.out.println("= " + e); :}|
					expr:e SEMI {: System.out.println("= " + e); System.exit(0); :};
	expr      ::=   expr:e1 PLUS expr:e2  {: RESULT = new Integer(e1.intValue() + e2.intValue()); :} | 
					expr:e1 MINUS expr:e2 {: RESULT = new Integer(e1.intValue() - e2.intValue()); :} | 
					expr:e1 TIMES expr:e2 {: RESULT = new Integer(e1.intValue() * e2.intValue()); :} |
					expr:e1 DIVIDE expr:e2{: RESULT = new Integer(e1.intValue() / e2.intValue()); :} |
	            	expr:e1 MOD expr:e2   {: RESULT = new Integer(e1.intValue() % e2.intValue()); :} |
					NUMBER:n              {: RESULT = n; :} |
					MINUS expr:e          {: RESULT = new Integer(0 - e.intValue()); :} %prec UMINUS |
					LPAREN expr:e RPAREN  {: RESULT = e; :};
	id			::= ID COMMA id|ID;